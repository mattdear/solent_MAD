<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Intro to Android Development: Part 1:
Setting Up the Environment and Hello World</title>
<link rel="stylesheet" type="text/css" href="./Part 1_ Setting Up the Environment and Hello World_files/android.css" />
</head>

<body>
<div class="titlebox">
<h1>Intro to Android Development - Part 1</h1>
</div>




<p>The <a href="http://www.android.com/">Android</a> mobile operating
system is the leading smartphone and tablet operating system. From a minority operating
system only running on one phone (the T-Mobile G1) a few years ago it has
grown into one of the leaders in the smartphone operating system field,
along with iOS (on the iPhone), and to some extent,
Windows Mobile.</p>
<h2>Why develop for Android?</h2>
<p>There is one very important difference between Android and many of its
competitors. It is an open source operating system, which means that you
are free to modify it for your own ends. Even more crucially for app 
developers is that as a result of its open-source nature <em>you can 
develop and distribute applications without restriction</em>. This is in
contrast to some of the other contemporary mobile development options in
which the operating system vendor restricts distribution to a single
channel owned by themselves, and "vets" software before making it 
available. Android has an official distribution channel (the
<a href="http://play.google.com/">Play Store</a>), but this is more
liberal with accepting apps than some of the other vendors.</p> 


<h2>Android versions</h2>
<p>
At this point it is worth elaborating on the
various <em>versions of Android</em>. At the time of writing
(see <a href="https://developer.android.com/about/dashboards/index.html">the stats on android.com</a>), the most recent
versions deployed on actual mobile devices are 9.0 (Pie); 
8.0 and 8.1 (Oreo); however many devices are running 4.4 (KitKat), 
5.0 and 5.1 (Lollipop); 
6.0 (Marshmallow) and 7.0 and 7.1 (Nougat).
Marshmallow is currently the most
installed version (16.9% as at early May 2019).</p>
<p>It can be seen from the stats above that 
significant numbers of devices are still running 
Lollipop (5.x) and around 7% version 4.4 (KitKat); therefore, targeting 
4.4 upwards, or 5.0 upwards, is a
sensible approach. The <em>support library</em> (which will be covered
later) makes this easier.</p>
<p>Another 
concept that you need to understand is the <em>API level</em>. The
<em>Android API</em> is the set of Java classes which are used to program
Android apps with. The API level
denotes revisions to the Android API, in a sequence of positive integers
starting from 1. Thus, the numbers used for the
API levels are not the same as those used for the Android versions, but
each API level corresponds to a particular version. The idea is that each time
Android itself is updated, the API is updated too. For example: 
    <ul>
    <li>API level 15 corresponds to Android 4.0.3; </li>
    <li>API level 19 corresponds to Android 4.4;</li>
	<li>API level 23 corresponds to Android 6;</li>
	<li>API level 26 corresponds to Android 8.0;</li>
	<li>API level 28 corresponds to Android 9</li>
    </ul>
When developing an Android app, you have to specify the minimum API level on
which your app will run. Thus an app with minimum API level 19, for example,
will only run on 4.4+. As seen above, the vast majority of devices
are running at least API level 19 (Android 4.4; KitKat), so if you specify
API level 19 as a minimum you will be targeting the majority of devices.
</p>
<h2>Runtime Environment: ART and Dalvik</h2>
<p>With standard Java, you compile to bytecode which is then run using the
Java Virtual Machine (JVM). Android is similar but rather than using the standard
JVM, it uses its own virtual machine and corresponding
bytecode format (DEX format). So "regular" Java bytecode will not run on Android and Android apps will not
run on a regular JVM.
</p>
<p><em>Dalvik</em> was the original virtual machine, which versions of Android up to 4.4 used. 
With Android 5.0, a new virtual machine (<em>ART : Android Runtime</em>)
(see <a href="https://source.android.com/devices/tech/dalvik/configure.html">here</a>) is used instead.
See <a href="https://source.android.com/devices/tech/dalvik/">here</a> for more details on Android
virtual machines.</p>
<h2>General nature of Android development</h2>
<p>Android development is generally done in the Java programming language.
However, because the environment differs from a standard desktop PC, the
actual libraries available differ somewhat from the standard Sun/Oracle
Java Development Kit. Many standard Java features from packages such as
java.io and java.util are available; however (as you might expect) the
standard Java GUI libraries (designed for desktop applications) are not, and also the structure
of an Android application is significantly different due to the
different style of interaction with a mobile device compared to a desktop computer.</p>
<h2>What do you need to start Android development?</h2>
<p>To get started on Android development you ideally need  
the <em>Android Studio</em> IDE.
Android Studio is Google's custom IDE for 
Android development; it is now the official IDE for Android.</p>
<p>It is also possible to develop apps purely using command-line
(console) tools but we will not cover this in this unit.</p>
<p>Android Studio provides an IDE 'wrapper' round the core Android
development environment, which contains the following components:
    <ul>
    <li>The Android Software Development Kit (SDK): provides Android libraries, tools to generate
	bytecode and distributable apps and the <em>SDK Manager</em> which allows you to download
	libraries for different versions of Android;</li>
    <li>The <em>AVD (Android Virtual Device) Manager</em>: allows creation of
    virtual phones or tablets allowing you to test your app in the absence of a real device.</li>
    </ul>
</p>
<p>You can access the Android SDK and the AVD Manager either through an IDE such as Android Studio or
independently, via the command-line.</p>
<h3>Getting started</h3>
<p>The best way to explore the different components of the Android development environment is to 
get started with Android Studio. Launch Studio, you will see a screen like this:
</p>
<p>
<img src="./Part 1_ Setting Up the Environment and Hello World_files/studiomainscreen.png" alt="Studio main screen" />
</p>

<h4>Creating a project</h4>
<p>
Select "Start a new Android Studio project". You will then see this screen.
This allows you to create a new project. 
<em>See the important points below on where you should save your
project.</em>
</p>
<p>
<img src="./Part 1_ Setting Up the Environment and Hello World_files/studionewproject.png" alt="Studio: start a new project" />
</p>
<p>
To explain these one by one:
	<ul>
	<li><em>Application name</em>: the name of your application.</li>
	<li><em>Company domain</em>: a unique identifier for yourself or your
	organisation. Typically this will be your domain name (if you have one)
	but <em>example.com</em> can be used as a placeholder, hence
	<em>nickw.example.com</em>. Obviously replace <em>nickw</em> with your name!</li>
	<li><em>Project location</em>: where your projects will reside.
	You should make sure that this is <em>on the C: drive</em> 
	(under <em>C:\Users\your username</em>).
	(Note that the U: drive or USB stick will be too slow).<br />
	<strong>HOWEVER</strong>, you should then
	<em>copy it to the U: drive or USB stick, or push to GitHub</em>
	at the end of the class as 
	the C: drive will be <em>wiped</em> when you logout!
	Make a folder called <em>studio</em> within 
	<em>C:\Users\your username</em>
	to store your projects.
	Each
	project will automatically be stored in a subfolder with the same name as the project
	name. For example, <em>C:\Users\1smitj01\studio\HelloWorld</em>. </li>
	</ul>
</p>
<h4>Choosing a target device and Android version</h4>
<p>Once you have done this, the following screen will appear:
</p>
<p>
<img src="./Part 1_ Setting Up the Environment and Hello World_files/studiotargetdevices.png" alt="Studio target devices" />
</p>
<p>
This screen allows you to specify the target devices for your app.
It allows you to target standard mobile devices (phones and tablets) or 
more specialised devices such as smartwatches. It also allows you to specify
the minimum version of Android that your app supports.
Choose 4.4 (API 19; KitKat)</p>
<h4>Adding an activity</h4>
<p>The next screen allows you to add an <em>activity</em> to your project.
An <em>activity</em> is an
an individual screen of your app. Apps typically have several activities with
a <em>main activity</em> which represents the main screen of your app, which appears
when you first launch it.</p>

<p>
<img src="./Part 1_ Setting Up the Environment and Hello World_files/studioblankactivity.png" alt="Studio: adding a blank activity" />
</p>
<p>Choose the "blank activity". This will create an activity with little or no 
code added to it. In the next screen, you need to specify the name of the activity,
just enter "MainActivity" as in the screenshot below. The other entries (which will
be expanded upon later) will be automatically filled in.
</p>
<p>
<img src="./Part 1_ Setting Up the Environment and Hello World_files/studiocustomiseactivity.png" alt="Studio: customise activity" />
</p>
<h4>Explaining the layout of a project</h4>
<p>
If you expand the project layout on the left the layout will look something like this:
</p>
<p>
<img src="./Part 1_ Setting Up the Environment and Hello World_files/studioproject.png" alt="Studio: project layout" />
</p>
<p>To explain each entry:
	<ul>
	<li><em>manifests</em>: this contains the <em>manifest file</em>, 
	AndroidManifest.xml, which contains information about the app and its
	contents. We will return to this later.</li>
	<li><em>java</em>: the actual code. Note how it contains our activity,
	<em>MainActivity.java</em></li>
	<li><em>res</em>: the <em>resources</em>. These are additional files our
	app needs, such as screen layouts, menus, images and so on. We will 
	examine resources in more detail later.</li>
	<li><em>Gradle Scripts</em>: Gradle is a tool to automate the process
	of building an application. It links in  
	third-party
	Java libraries (<em>dependencies</em>) our app needs to run, downloading
	them from online repositories if necessary. The key Gradle script is
	<em>build.gradle</em>. In this file, we also specify the minimum
	Android version supported by our app.
	Note that the important <em>build.gradle</em> is the one in the
	<em>app</em> folder, not the other one.</li>
	</ul>
</p>
<h2>Hello World!</h2>
<p>We're now going to start - as always in software development - with 
a Hello World app. You should see pre-generated code something like this: 
<pre>
package whatever.your.package.is; // leave this line as it was
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}</pre>
What does this code mean?
    <ul>
    <li>As mentioned above, the entry point to an Android application is an
    <em>Activity</em>. An Activity is basically a single screen of an Android app.
    It contains "widgets" or user interface elements, through which the user can 
    interact with the app: for example, text fields, buttons and radio buttons.
    An Android app will typically consist of several Activities, representing 
    different screens within the app, but there will be one main activity which launches
    when the app is launched. The main activity is defined in the manifest file
    (see later)</li>
    <li>The <em>onCreate()</em> method is the actual entry point to the activity. It can be
    viewed as roughly equivalent to the <em>main()</em> method in standard Java, or
    in C or C++. Whenever an activity is created for the first time, its
    <em>onCreate()</em> method is called: therefore, initialisation code should be
    placed in onCreate().</li>
	<li>Note that the activity here is an <em>AppCompatActivity</em>,
	which is a subclass of plain <em>Activity</em>.
	This allows us to use the support library to include newer Android
	API features on older versions of Android. We will return to this
	later.</li>
    <li>The first thing we do is call the version of <em>onCreate()</em> in the
    superclass (i.e. AppCompatActivity). In this way, we can ensure that common functionality
    which occurs when all activities are created will also occur in our case.</li>
    <li>We then set up the layout. Don't worry about what the <em>R</em> means just
    yet: instead, take out the line
    <pre>
    setContentView(R.layout.activity_main);
    </pre>
    and replace it with
    <pre>
    TextView tv=new TextView(this);
    tv.setText("Hello World!");
    setContentView(tv);
    </pre>
    You will also need to add
    <pre>
    import android.widget.TextView;
    </pre>
    in the imports section at the top of the file.
    </li>
    <li>Hopefully this code is fairly obvious but it does illustrate a couple of key
    concepts. The first is the concept of a <em>View</em>. Every Activity contains
    a View which is the "main component" of the screen, referred to as the
    <em>content view</em>. This might be a group of
    radio buttons, a list, a form or even a map. Here, it's the simplest type of
    View: a <em>TextView</em>. A TextView is what it sounds like: a View which can
    contain text. So here, we create a TextView containing the text "Hello world"
    and make it the content view of our Activity.
    </li>
    </ul>
</p>
<h3>Setting up an Android Virtual Device</h3>
<p>If you do not have an actual Android device, you will
need to set up an <em>Android virtual device (AVD)</em> before starting programming. This is an 
emulator which you can use to test your apps as you develop them. It 
resembles an actual phone, and the user interface looks just like a user
interface on a real Android phone so you can test your apps fairly
realistically. When creating an AVD you will be prompted for various
properties of the emulator such as resolution.</p>
<p>To set up an AVD in Studio, select <em>Tools-Android-AVD Manager</em>. 
This will launch the Android AVD manager
from within Android Studio, as shown below:
</p>
<p>
<img src="./Part 1_ Setting Up the Environment and Hello World_files/studioavdman.png" alt="AVD manager before virtual devices have been set up" />
</p>
<p>This screen shows that there are three AVDs already set up, called 
<em>kitkat</em>, <em>kitkat_small</em> and <em>Nexus 5 API 22 x86</em>. On your system there
probably won't be any yet. So
 Set up a new AVD as follows:
    <ul>
    <li>Click the "Create Virtual Device" button on the AVD manager.
	This will bring up a dialog like the one below:
	<br />
	<img src="./Part 1_ Setting Up the Environment and Hello World_files/studioavdman2.png" alt="Dialog for creating an AVD" />
	</li>
	<li>Select one with low resolution (higher-resolution ones may be slow). 
	<em>5.1" WVGA</em> is
	a reasonable one to pick.</li>
	<li>Select an Android version for the virtual device.
	<strong>Choose an x86 image as it will be faster, but do NOT choose
	one with Google APIs.</strong> 
	<br />
	<img src="./Part 1_ Setting Up the Environment and Hello World_files/studioavdman3.png" alt="AVD: selecting Android version" />
	</li>
    <li>Give it an alphanumeric name, e.g. Android51 as below.
	<br />
	<img src="./Part 1_ Setting Up the Environment and Hello World_files/studioavdman4.png" alt="AVD: naming" />
	</li>

	<li>Once setup, your new AVD will appear on the "Your Virtual Devices" 
	screen.</li>
    </ul>    
</p>
<h3>Running on an actual device</h3>
<p>You can test your apps on an actual device, though you have to enable the developer settings.
Full instructions on this are available
<a href="http://developer.android.com/guide/developing/device.html">from the Android site</a>.
On Linux and Mac OS X as no driver is required.
On Windows, a driver for your device is required, however Nexus devices can use the 
<a href="http://developer.android.com/sdk/win-usb.html">
Google USB driver</a> which comes with the SDK. For other devices, you can download a driver for your device from
the Android developer site.
See <a href="http://developer.android.com/tools/extras/oem-usb.html">the Android documentation on driver installation</a> for more details. To summarise, you have to 
<em>download</em> and then <em>install</em> the driver. Even with the Google USB driver, included in the SDK, the <em>installation</em> step is necessary.</p>
<p><em>The Google USB Driver has been installed in the labs</em> which means that you can use Nexus and other Google-branded devices (e.g. Pixel)
to test your apps on. The Samsung driver should also have been installed,
meaning Samsung phones should also work.
If you have another Android device, you will need to use the emulator.</p>



<h3>The Android SDK Manager</h3>
<p>One of the most crucial components of the Android SDK is the
<em>SDK Manager</em>. This piece of software, which can be run within Android Studio or standalone,
allows you to download
and install versions of the SDK for different versions of Android, along with
other items such as documentation. So if a new version of the SDK is 
released, the SDK manager allows you to download that new version.
The default Studio download only comes with the latest versions of the SDK, so if you want
to target older devices, you need to download older versions.
</p>


<h4>Starting the SDK Manager</h4>

<p>On Android Studio, select <em>Tools-Android-SDK Manager</em>. This will launch an intermediate
screen listing installation options; however for more control it's recommended you then click on
<em>Launch Standalone SDK Manager</em> which will give you the SDK Manager as it appears if you launch
it on its own without Android Studio.</p>

<h4>Installing SDK versions from the Android SDK manager</h4>

<p>You might want to install older SDK versions than those included by default by Android Studio.
For example, you might want to install Android 4.4.2 and 4.0.3 (API levels 19 and 15 
respectively). Start the SDK manager as described above and select these two versions, as shown in the screenshot 
below:
    <ul>
    <li>Android 4.4.2 (API 19);</li>
    <li>Android 4.0.3 (API 15).</li>
    </ul>
<br />
<img src="./Part 1_ Setting Up the Environment and Hello World_files/sdkman1.png" alt="Android SDK manager with user about to install 4.0.3 and 4.4.2" />
<br />
You will then need to accept the licence and it will download the individual components of these
versions of the SDK.


</p>


<h3>XML Layouts</h3>
<p>The Hello World example above will probably look familiar if you have done any programming
in desktop GUI toolkits, such as Java AWT or Swing. We add components to the main screen
programatically. However with Android we can cut down on the amount of setup code using
<em>XML layouts</em> instead. With XML layouts, we define the layout of the content view
of the Activity using XML tags; in that respect, there is some similarity with writing an
HTML web page, but whereas websites are driven by a browser's engine, with apps <em>we</em>
are writing the engine and are thus much more in control. 
(In case you are not aware, XML is a tag based format for representing 
data). XML layouts have a number of advantages, they include:
    <ul>
    <li>Separating the layout keeps the Java focused on the app's logic, meaning
    that it's easier to understand the "nitty-gritty" of the app without having to
    wade through GUI setup code;</li>
    <li>We can change the layout without recompiling, simply by changing the XML;
    the XML is loaded by the application when it runs;</li>
    <li>Separation of the work of designers and developers:
    designers can work on the app's layout by manipulating the XML code without
    needing to know any Java.</li>
    </ul>
Here is an example of an XML based layout:
<pre>
<![CDATA[
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    >
<TextView android:layout_width="wrap_content" 
android:layout_height="wrap_content" android:text="@string/hello" />
</LinearLayout>
]]>
</pre>
To explain this:
    <ul>
    <li>The <em>LinearLayout</em> defines the view's layout. The layout specifies how
    the various components are arranged with respect to each other. LinearLayout
    indicated that components are placed adjacent to each other, either vertically
    or horizontally (depending on the <em>android:orientation</em> attribute)</li>
 
    <li>We then add a TextView tag. Basically every Android UI class has corresponding
    tag of the same name.</li>
    <li>The <em>android:layout_width</em> and <em>android:layout_height</em> 
    attributes of the <em>TextView</em> describe how it fills its parent layout
    in the horizontal and vertical directions.
    The most common values are <em>match_parent</em> and <em>wrap_content</em>. The
    former, as used here, means that the TextView entirely fills its parent
    (the LinearLayout), the result being that the TextView fills the entire screen.
    The latter,<em>wrap_content</em>, means that <em>enough space to contain the content</em>
    (the text "Hello World" here) should be used.
    </li>
    <li>The <em>android:text</em> attribute specifies the text within the TextView.
    Note however how we don't give it a straight value, we use <em>@string/hello</em>.
    This is described in more detail below.</li>
    </ul>
Where can the XML file be found? It is found in the <em>application resources</em>,
described below.
</p>
<h3>Application resources</h3>
<p>Android apps consist of Java code plus <em>resources</em> - additional data which the
app needs to do its job. An example of a resource is an XML layout file, as described
above. If you expand the <em>res</em> folder in Android Studio, you will see the layout below.</p>
<p>
<img src="./Part 1_ Setting Up the Environment and Hello World_files/studioresources.png" alt="Application resources" />
</p>

<p>

Within the <em>res</em> folder
is a <em>layout</em> folder, and within that is the <em>activity_main.xml</em> which is
auto-generated when you start a new Android project: it is basically a default main view
for your main Activity. You replaced it with code to manually create a TextView object above. 
However, now you are going to change it back to reading the layout from
the XML file. Replace (or comment out) the code
you wrote above with this code (which was in the
original auto-generated code for your main Activity):
<pre>setContentView(R.layout.activity_main);</pre>
Run your app again and you will see that this message now appears:
<pre>Hello World!</pre>
Where is this message coming from? Remember that in the <em>activity_main.xml</em> file, 
the <em>android:text</em> attribute of the TextView describes the text on the TextView
and this is set to the value <em>@string/hello</em>. What does <em>@string/hello</em>
represent? It is a <em>string resource</em>. In Android development, to make it easier to
translate apps into different languages, much of the text that we see within the user
interface is defined in a <em>string resource file</em> so that we can easily translate
an app to a different language simply by editing the string resource file. This can be
found within the <em>values</em> folder within <em>res</em>, in the file <em>strings.xml</em>.
If you look in the <em>strings.xml</em> file, you will see this line:
<pre>
<![CDATA[
<string name="hello">Hello World!</string>
]]>
</pre>
Change this to:
<pre>
<![CDATA[
<string name="hello">Geia sas Kosmos!</string>
]]>
</pre>
(Sorry if I have got the Greek wrong!). 
Run your app again, and you should find it
greets you with <em>Geia sas Kosmos!</em> Notice how each string in the <em>strings.xml</em>
file has a <em>name</em>, and we reference that name in the layout file with
<em>android:text="@string/(name of string)"</em>.</p>
<p>As well as layout and strings, the <em>res</em> folder can contain other types of
resource. These include application menus (which we will come onto a bit later on) and
images. When you distribute an app, all the resources are packed into one file along with
your actual code.</p>
<h3>The auto-generated R.java file</h3>
<p>You might be a bit puzzled as to the meaning of the <em>R</em> in the code you added
above, i.e.
<pre>setContentView(R.layout.main);</pre>
What, actually, is this "R"? It's a pre-generated class which contains "hooks" into your
XML resource files. The <em>R.java</em> file, not directly accessible from Studio but 
present in your project, looks something like this:
<pre>
<![CDATA[
/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.example.nickw.helloworld;

public final class R {
    public static final class attr {
    }
    public static final class drawable {
        public static final int icon=0x7f020000;
    }
    public static final class layout {
        public static final int activity_main=0x7f030000;
    }
    public static final class string {
        public static final int app_name=0x7f040001;
        public static final int hello=0x7f040000;
    }
}

]]>
</pre>
Notice that it contains several static variables. These are identifiers which your Java
code can use to access the XML, for example <em>R.layout.activity_main</em> has the hex value
<em>0x7f030000</em> which is a "handle" for the activity_main.xml resource file. Every time you
add a resource to an Android app, your <em>R.java</em> will automatically be updated and
you will be able to use static attributes of <em>R</em> in your Java code to access
different resources. Never edit R.java directly by the way, the system will always do it
for you!
</p>


<h2>Further reading</h2>
<p>You might want
to check out these resources for further reading:
	<ul>
	<li><a href="http://developer.android.com/">The official Android developers'
	site</a></li>
	<li><a href="http://www.vogella.de/articles/Android/article.html">
	An in-depth tutorial on Android development</a></li>
	</ul>
</p>



</body>
</html>